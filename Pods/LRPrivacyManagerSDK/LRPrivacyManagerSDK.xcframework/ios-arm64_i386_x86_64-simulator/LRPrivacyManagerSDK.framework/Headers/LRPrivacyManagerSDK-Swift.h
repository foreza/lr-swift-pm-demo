#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef LRPRIVACYMANAGERSDK_SWIFT_H
#define LRPRIVACYMANAGERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import LRPreferenceLinkSDK;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LRPrivacyManagerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11AppUIConfig")
@interface AppUIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ButtonConfig;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16AttButtonsConfig")
@interface AttButtonsConfig : NSObject
@property (nonatomic, readonly, strong) ButtonConfig * _Nullable confirmButton;
@property (nonatomic, readonly, strong) ButtonConfig * _Nullable cancelButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
@class AttLocalization;
@class Topic;
@class AttUIConfig;
@class AttControlsConfig;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK9AttConfig")
@interface AttConfig : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, AttLocalization *> * _Nullable localization;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<Topic *> *> * _Nullable topics;
@property (nonatomic, readonly, strong) AttUIConfig * _Nullable ui;
@property (nonatomic, readonly, strong) AttControlsConfig * _Nullable controls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AttScreenConfig;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK17AttControlsConfig")
@interface AttControlsConfig : NSObject
@property (nonatomic, readonly, strong) AttScreenConfig * _Nullable initialScreen;
@property (nonatomic, readonly, strong) AttScreenConfig * _Nullable reminder;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15AttLocalization")
@interface AttLocalization : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderSettingsButton;
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderCancelButton;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialContinueButton;
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialCancelButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15AttScreenConfig")
@interface AttScreenConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14AttThemeConfig")
@interface AttThemeConfig : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable imageUrl;
@property (nonatomic, readonly, strong) AttButtonsConfig * _Nullable initialScreen;
@property (nonatomic, readonly, strong) AttButtonsConfig * _Nullable reminderScreen;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11AttUIConfig")
@interface AttUIConfig : NSObject
@property (nonatomic, readonly, strong) AttThemeConfig * _Nullable lightTheme;
@property (nonatomic, readonly, strong) AttThemeConfig * _Nullable darkTheme;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIColor;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12ButtonConfig")
@interface ButtonConfig : NSObject
@property (nonatomic, readonly, strong) UIColor * _Nullable textColor;
@property (nonatomic, readonly, strong) UIColor * _Nullable strokeColor;
@property (nonatomic, readonly, strong) UIColor * _Nullable bgColor;
@property (nonatomic, readonly, copy) NSString * _Nullable borderShape;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14ButtonUIConfig")
@interface ButtonUIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;
@class PublisherConsent;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11ConsentData")
@interface ConsentData : NSObject
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable specialFeatures;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposes;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposesLegInt;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable vendors;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable vendorsLegInt;
@property (nonatomic, readonly, strong) PublisherConsent * _Nullable publisherTCConsent;
/// Constructor for building ConsentData object.
/// \param specialFeatures Included special features (mandatory)
///
/// \param purposes Included purposes (mandatory)
///
/// \param purposesLegInt Included legitimate interest for purposes (mandatory)
///
/// \param vendors Included vendors which will be filtered inside function (mandatory)
///
/// \param vendorsLegInt Included vendors legitimate interest (mandatory)
///
/// \param publisherTCConsent Included publisher’s data (optional)
///
- (nonnull instancetype)initWithSpecialFeatures:(NSArray<NSNumber *> * _Nonnull)specialFeatures purposes:(NSArray<NSNumber *> * _Nonnull)purposes purposesLegInt:(NSArray<NSNumber *> * _Nonnull)purposesLegInt vendors:(NSArray<NSNumber *> * _Nonnull)vendors vendorsLegInt:(NSArray<NSNumber *> * _Nonnull)vendorsLegInt publisherTCConsent:(PublisherConsent * _Nullable)publisherTCConsent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK17ConsentDataConfig")
@interface ConsentDataConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16CustomFontConfig")
@interface CustomFontConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11CustomStack")
@interface CustomStack : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK10Disclosure")
@interface Disclosure : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14DisclosureData")
@interface DisclosureData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
@property (nonatomic, readonly, copy) NSString * _Nullable domain;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposes;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK19DisclosureDataArray")
@interface DisclosureDataArray : NSObject
@end

typedef SWIFT_ENUM(NSInteger, DisclosureDataType, open) {
  DisclosureDataTypeCookie = 0,
  DisclosureDataTypeWeb = 1,
  DisclosureDataTypeApp = 2,
/// Used in case vendor provided <code>storageType</code> that is not <code>web</code>, <code>cookie</code> or <code>app</code>
  DisclosureDataTypeInvalid = 3,
};


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK7Feature")
@interface Feature : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Feature (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12GeoTargeting")
@interface GeoTargeting : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14GlobalUIConfig")
@interface GlobalUIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16GlobalVendorList")
@interface GlobalVendorList : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RedisplayAfter;
@class Localization;
@class UIConfigDict;
@class NoticeConfig;
@class PreferenceLinkConfig;
@class NSData;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15LRConfiguration")
@interface LRConfiguration : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable appId;
@property (nonatomic, readonly, strong) RedisplayAfter * _Nullable redisplayAfter;
@property (nonatomic, readonly, strong) ConsentDataConfig * _Nullable consentDataConfig;
@property (nonatomic, readonly, strong) GeoTargeting * _Nullable geoTargeting;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable supportedLocales;
@property (nonatomic, readonly, copy) NSString * _Nullable defaultLocale;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<Topic *> *> * _Nullable topics;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Localization *> * _Nullable localization;
@property (nonatomic, readonly, strong) UIConfigDict * _Nullable uiConfig;
@property (nonatomic, readonly, strong) Disclosure * _Nullable disclosure;
@property (nonatomic, readonly, strong) NoticeConfig * _Nullable noticeConfig;
@property (nonatomic, readonly, strong) PreferenceLinkConfig * _Nullable preferenceLink;
@property (nonatomic, readonly, strong) AttConfig * _Nullable attConfig;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes configuration with the File URL provided. Configuration file can be downloaded from the Live Ramp dashboard.
/// If the configuration is not valid it would not be created and will return nil.
/// Example of providing file URL:
/// \code
/// func fileURL(fileName: String, fileType: String) -> URL? {
///     guard let filePath = Bundle.main.path(forResource: fileName, ofType: fileType) else {
///         return nil
///     }
///     return URL(fileURLWithPath: filePath)
/// }
///
/// \endcode\param configurationURL URL of the file containing Live Ramp Privacy Manager configuration.
///
- (nullable instancetype)initWithConfigurationURL:(NSURL * _Nonnull)configurationURL OBJC_DESIGNATED_INITIALIZER;
/// Initializes configuration with the File URL provided. Configuration file can be downloaded from the Live Ramp dashboard.
/// If the configuration is not valid it would not be created and will return nil.
/// Example of providing data from a file (see example for init with configurationURL above):
/// \code
/// ...
/// let data = try? Data(contentsOf: configURL)
///
/// \endcode\param configurationData Live Ramp Privacy Manager configuration Data.
///
- (nullable instancetype)initWithConfigurationData:(NSData * _Nonnull)configurationData OBJC_DESIGNATED_INITIALIZER;
@end

/// Used to determine from which screen user gave consent
typedef SWIFT_ENUM(NSInteger, LRConsentScreen, open) {
/// case .notice means that user gave consent from notice screen
  LRConsentScreenNotice = 1,
/// case .manager means that user gave consent from manager or some other screen (other that notice)
  LRConsentScreenManager = 2,
};

typedef SWIFT_ENUM(NSInteger, LRConsentType, open) {
/// User rejected everything, no consent given
  LRConsentTypeRejectAll = 0,
/// User accepted everything, full consent given
  LRConsentTypeAcceptAll = 1,
/// User accepted something but not everything, partial consent
  LRConsentTypePartialConsent = 2,
/// User didn’t consent to anything yet (UI not presented to user)
  LRConsentTypeUnknownConsent = 3,
/// Gdpr does not apply to the user
  LRConsentTypeGdprNotApplied = 4,
};

typedef SWIFT_ENUM(NSInteger, LRError, open) {
  LRErrorNotInitialized = 0,
  LRErrorInitialization = 1,
  LRErrorMissingConfiguration = 2,
  LRErrorInvalidConfiguration = 3,
  LRErrorMissingAppId = 4,
  LRErrorWrongUIHierarchy = 5,
  LRErrorUserInterfaceAlreadyPresented = 6,
  LRErrorOfflineGVLInvalid = 7,
  LRErrorOfflineGVLMissing = 8,
  LRErrorMissingPublisherTCConfiguration = 9,
  LRErrorGiveConsentError = 10,
};
static NSString * _Nonnull const LRErrorDomain = @"LRPrivacyManagerSDK.LRError";

typedef SWIFT_ENUM(NSInteger, LREvent, open) {
  LREventTcloaded = 0,
  LREventCmpuishown = 1,
  LREventUseractioncomplete = 2,
  LREventStub = 3,
  LREventLoading = 4,
  LREventLoaded = 5,
  LREventDisabled = 6,
  LREventAuditIdChanged = 7,
  LREventAcceptAllButtonClicked = 8,
  LREventDenyAllButtonClicked = 9,
  LREventSaveAndExitButtonClicked = 10,
  LREventExitButtonClicked = 11,
  LREventShouldPresentConsentWall = 12,
  LREventNotSubjectToGDPR = 13,
  LREventUserInterfaceAlreadyPresented = 14,
/// Fired when DAU log is successfully sent to server. This event can be used to check which consent type is given by calling <code>LRPrivacyManager.shared.getConsentType()</code>
  LREventDauLogSent = 15,
/// Fired when SDK synchronized with <em>PreferenceLink</em>
  LREventSyncedWithPreferenceLink = 16,
/// Fired when user taps “Continue” button on initial ATT Pre-Prompt
  LREventAttInitialContinue = 17,
/// Fired when user taps “Cancel” / “X” button on initial ATT Pre-Prompt
  LREventAttInitialCanceled = 18,
/// Fired when user taps “Open Settings” button on non initial ATT Pre-Prompt
  LREventAttReminderSettings = 19,
/// Fired when user taps “Cancel” / “X” button on non initial ATT Pre-Prompt
  LREventAttReminderCanceled = 20,
/// Fired when user confirms ATT by tapping “Allow” button on system dialog
  LREventAttAuthorized = 21,
/// Fired when user denies ATT by tapping “Ask App Not to Track” button on system dialog
  LREventAttDenied = 22,
};


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK22LRPreferenceLinkConfig")
@interface LRPreferenceLinkConfig : NSObject
/// Unique identifier used for synchronization with <em>Preference Link</em>. Supported types are <code>Int</code> and <code>String</code>
/// Setting this property will cause <em>Privacy Manager</em> to synchronize consent data with <em>Preference Link</em>.
/// To synchronize data with <em>Preference Link</em> before consent wall is resurfaced, set this property before calling <code>LRPrivacyManager.initialize(sdkInitializedHandler:)</code>
/// warning:
/// Setting this property to a new value will clear consent related data from <code>UserDefaults</code>.
@property (nonatomic) id _Nullable identifyingValue;
/// Additional data that is synced alongside <em>Privacy Manager</em> data
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull additionalData;
/// Configure information used for synchronization with PreferenceLink
/// \param identifyingValue Unique identifier used for synchronization with <em>Preference Link</em>. Supported types are: <code>Int</code> and <code>String</code>
///
/// \param additionalData Additional data that is synced alongside <em>Privacy Manager</em> data
///
- (nonnull instancetype)initWithIdentifyingValue:(id _Nullable)identifyingValue additionalData:(NSDictionary<NSString *, id> * _Nonnull)additionalData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LRPrivacyManagerConfig;
@class Publisher;
@protocol LRPrivacyManagerDelegate;
@class VendorData;
@class VendorConsent;
@class NSHTTPCookie;

/// The main interface of the Live Ramp Privacy Manager (SDK).
/// It wraps up the TCF 2.0 API
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16LRPrivacyManager")
@interface LRPrivacyManager : NSObject
+ (void)configureWith:(LRPrivacyManagerConfig * _Nonnull)configuration;
/// Version number of integrated LRPrivacyManager SDK
@property (nonatomic, readonly, copy) NSString * _Nonnull cmpSdkVersion;
/// Current locale used by SDK.
/// Has value of <code>config.defaultLocale</code> if specific locale is not provided by calling <code>LRPrivacyManager.setLanguage(code:)</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull currentLocale;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LRPrivacyManager * _Nonnull shared;)
+ (LRPrivacyManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)initializeWithSdkInitializedHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))sdkInitializedHandler;
/// Get filtered Global Vendor List
/// <ul>
///   <li>
///     This function should be called to get GVL filterd by the configuration with applied publisher restrictions
///   </li>
/// </ul>
/// \param callback which will return 
/// <ul>
///   <li>
///     globalVendorList: The information about global vendor list and custom vendors
///   </li>
///   <li>
///     error: The error that occurred, if any
///   </li>
/// </ul>
///
- (void)getGlobalVendorListWithCallback:(SWIFT_NOESCAPE void (^ _Nonnull)(GlobalVendorList * _Nullable, NSError * _Nullable))callback;
/// Get Configuration
/// <ul>
///   <li>
///     This function should be called to get Configuration
///   </li>
/// </ul>
/// \param callback which will return 
/// <ul>
///   <li>
///     configuration: The information about SDK configuration
///   </li>
///   <li>
///     error: The error that occurred, if any
///   </li>
/// </ul>
///
- (void)getConfigurationWithCallback:(SWIFT_NOESCAPE void (^ _Nonnull)(LRConfiguration * _Nullable, NSError * _Nullable))callback;
/// Show user interface
- (void)presentUserInterfaceWithCallback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Temporary save all SDK related keys from standard UserDefaults
/// This function should be called before you want to clear standard UserDefaults but want to preserve SDK related keys from the standard UserDefaults.
/// In the process keys are saved in-memory. After clearing standard UserDefaults it is mandatory to restore them.
/// Restoring of keys is done by calling restoreUserDefaultsKeys() function.
- (void)persistUserDefaultsKeys;
/// Restore all SDK related keys into the standard UserDefaults
/// This function should be called to restore SDK related keys that are removed from standard UserDefaults and temporarily saved by persistUserDefaultsKeys() function.
- (void)restoreUserDefaultsKeys;
///
/// returns:
/// IAB TCString if it exists, empty string otherwise
- (NSString * _Nonnull)getIABTCString SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// LiveRamp TCString if it exists, empty string otherwise
- (NSString * _Nonnull)getLRTCString SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// AC String if it exists, empty string otherwise
- (NSString * _Nonnull)getACString SWIFT_WARN_UNUSED_RESULT;
/// Get purpose one tratment from the LRConfiguration
///
/// returns:
/// LiveRamp purposeOneTreatment as Bool. True is a default value
- (BOOL)getPurposeOneTreatment SWIFT_WARN_UNUSED_RESULT;
/// Provide Audit ID to the caller
- (NSString * _Nonnull)getAuditId SWIFT_WARN_UNUSED_RESULT;
/// Reset Audit ID overwriting it with the new value.
- (NSString * _Nonnull)resetAuditId SWIFT_WARN_UNUSED_RESULT;
/// Give consent and save IAB Keys into the standard UserDefaults, one key for standard TCString, and the other for LRTCString
/// After creating IAB and LR TC String AC String will be also created
/// <ul>
///   <li>
///     This function should be called to accept consent given from the user’s side
///   </li>
///   <li>
///     After calling the function consent will be saved into the standard UserDefaults under required keys by IAB Documentation.
///   </li>
/// </ul>
/// \param consentData Which consists of:
/// <ul>
///   <li>
///     specialFeatures: Included special features
///   </li>
///   <li>
///     purposes: Included purposes
///   </li>
///   <li>
///     purposesLegInt: Included legitimate interest for purposes
///   </li>
///   <li>
///     vendors: Included vendors which will be filtered inside function
///   </li>
///   <li>
///     vendorsLegInt: Included vendors legitimate interest
///   </li>
///   <li>
///     publisherTC: Included publisher’s data, which is optional
///   </li>
///   <li>
///     shouldCheckForHandleLegIntFlag: flag to check if we need to use handleLegIntOnAcceptAndDenyAll from the configuration to setup legInts
///   </li>
/// </ul>
///
/// \param consentScreen The screen from which user gave consent.
///
/// \param callback The callback to invoke with the given consent status.
///
- (void)giveConsentWithConsentData:(ConsentData * _Nonnull)consentData consentScreen:(enum LRConsentScreen)consentScreen callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Give full consent and save it under the IAB TCF Keys into the standard UserDefaults
/// <ul>
///   <li>
///     After calling this function full consent will be generated and the consent will be saved into the standard UserDefaults as per IAB standard under the IAB TCF keys and LR keys.
///     After creating IAB and LR TC String AC String will be also created
///   </li>
/// </ul>
/// \param consentScreen The screen from which user gave consent.
///
/// \param callback The callback to invoke with the accept consent status.
///
- (void)acceptAllWithConsentScreen:(enum LRConsentScreen)consentScreen callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Revoke consent and save it under the IAB TCF Keys into the standard UserDefaults
/// <ul>
///   <li>
///     After calling this function revoke consent will be generated and the result will be saved into the standard UserDefaults as per IAB standard under the IAB TCF keys and LR keys.
///     After creating IAB and LR TC String AC String will be also created
///   </li>
/// </ul>
/// \param consentScreen The screen from which user gave consent.
///
/// \param callback The callback to invoke with the revoked consent status.
///
- (void)revokeAllWithConsentScreen:(enum LRConsentScreen)consentScreen callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Get PublisherTC from configuration.
/// <ul>
///   <li>
///     This function should be called to get Publisher’s object from the configuration.
///   </li>
/// </ul>
///
/// returns:
/// Publisher’s object (Publisher) consisted out of arrays
- (void)getPublisherTCConfigurationWithCallback:(void (^ _Nullable)(Publisher * _Nullable, NSError * _Nullable))callback;
/// Subscribe for LREvents (set listener)
/// \param delegate LRPrivacyManagerDelegate instance
///
+ (void)setLRPrivacyManagerDelegateWithDelegate:(id <LRPrivacyManagerDelegate> _Nonnull)delegate;
/// Unsubscribe from LREvents (remove listener)
+ (void)removeLRPrivacyManagerDelegate;
/// Get Consent Data for TCString which is stored inside the standard UserDefaults
/// <ul>
///   <li>
///     This function should be called to get the consent data for saved TCString and LRTCString. All data that is saved under the TCString and LRTCString inside standard UserDefaults will be decoded and placed into the ConsentData object.
///   </li>
/// </ul>
///
/// returns:
/// ConsentData object which consists out of
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     specialFeatures: Included special features (mandatory)
///   </li>
///   <li>
///     purposes: Included purposes (mandatory)
///   </li>
///   <li>
///     purposesLegInt: Included legitimate interest for purposes (mandatory)
///   </li>
///   <li>
///     vendors: Included vendors which will be filtered inside function (mandatory)
///   </li>
///   <li>
///     vendorsLegInt: Included vendors legitimate interest (mandatory)
///   </li>
///   <li>
///     publisherTCConsent(optional): data is build out of 2 Bool values, givenConsent and givenLegIntConsent
///   </li>
/// </ul>
- (ConsentData * _Nullable)getConsentData SWIFT_WARN_UNUSED_RESULT;
/// Set Privacy Manager language. If available (selected language is in list of available languages in configuration) SDK content will be translated to it.
/// \param code Language code to use for the SDK Content. This language will override the preferred language from configuration
///
+ (void)setLanguageWithCode:(NSString * _Nonnull)code;
/// Process data to check if vendor has consents inside TCString or LiveRampString
/// This function should be used only when SDK is initialized properly
/// \param vendors list of <code>VendorData</code> objects to check consents
///
///
/// returns:
/// array of vendor objects with pairs (vendorId, hasConsent) for each object, if sdk is not initialized properly nil will be returned for vendorConsents array.
- (NSArray<VendorConsent *> * _Nullable)checkConsentFor:(NSArray<VendorData *> * _Nonnull)vendors SWIFT_WARN_UNUSED_RESULT;
/// Synchronize privacy manager related data from <code>UserDefaults</code> with <em>PreferenceLink</em>
/// This method should be used for headless implementation of <code>LRPrivacyManagerSDK</code>
/// <h1>When to call this method (suggestions)</h1>
/// <ul>
///   <li>
///     when consent is given/changed
///   </li>
///   <li>
///     in <code>LRPrivacyManager.initialize(sdkInitializedHandler:)</code> handler
///   </li>
///   <li>
///     before presenting consent wall
///   </li>
///   <li>
///     after returning to the app from the background — consider <a href="x-source-tag://pl.timeoutValue">timeoutValue</a> and <a href="x-source-tag://pl.timeoutOption">timeoutOption</a> to limit unnecessary sync
///   </li>
/// </ul>
/// \param callback The callback to invoke after synchronization with <em>PreferenceLink</em> is finished
///
- (void)doSyncWithCallback:(void (^ _Nullable)(enum PLSynchronizationStatus, NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))callback;
/// Object containing data used for communication between Privacy Manager and PreferenceLink
@property (nonatomic, readonly, strong) LRPreferenceLinkConfig * _Nonnull preferenceLink;
/// Call this method at any time to retrieve consent status for user
///
/// returns:
/// consent status
- (enum LRConsentType)getConsentType SWIFT_WARN_UNUSED_RESULT;
/// Get consent related cookies that allows sharing consent with the WEB SDK through <code>WKWebView</code>
/// \param domain domain for which cookies will be used
///
///
/// returns:
/// array of cookies required for web SDK
- (NSArray<NSHTTPCookie *> * _Nonnull)getCookiesForDomain:(NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
/// Get generated cookie sharing URL with query items that allows sharing consent with the WEB SDK through external browsers
/// warning:
/// In case cookie sharing URL couldn’t be generated, unmodified URL will be returned
/// \param url URL for which cookie sharing URL will be generated
///
///
/// returns:
/// Generated cookie sharing URL
- (NSURL * _Nonnull)generateCookieSharingURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Removes all data from the <code>UserDefaults</code> that is set by <code>LRPrivacyManagerSDK</code>,
/// Use this method in case it is required to remove all consent data related to the user. For example user signs out from the app and all consent must be removed.
/// note:
/// Keys required by IAB standard are not deleted from <code>UserDefaults</code>.
- (void)clearUserDefaults;
/// Call this method to show ATT prompt
/// warning:
///
/// <ul>
///   <li>
///     This method must be called after SDK is initialized, otherwise it won’t have desired configuration (you can use <code>LRPrivacyManagerDelegate.eventFired(:)</code> and wait for <code>.loaded</code> event)
///   </li>
///   <li>
///     <code>NSUserTrackingUsageDescription</code> must be set  in <code>Info.plist</code>
///   </li>
/// </ul>
/// note:
///
/// To configure look and content of the ATT prompt screens enable ATT for the application in the console
/// There are two types of ATT screens:
/// <ul>
///   <li>
///     initial — shown when user is presented with ATT prompt for the first time or user canceled ATT prompt screen
///   </li>
///   <li>
///     reminder — shown when user already denied ATT. Because ATT is one-time request to authorize or deny access on this screen there will be link to open iOS settings
///   </li>
/// </ul>
/// This method will exit and no events will be triggered in following cases:
/// <ul>
///   <li>
///     ATT is not enabled and configured in the console
///   </li>
///   <li>
///     SDK is not fully initialized and configuration is not available
///   </li>
///   <li>
///     User restricted app tracking globally in settings
///   </li>
///   <li>
///     User already authorized app tracking for the app
///   </li>
/// </ul>
- (void)presentATTPrePrompt SWIFT_AVAILABILITY(ios,introduced=14);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK22LRPrivacyManagerConfig")
@interface LRPrivacyManagerConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create privacy manager configuration
/// \param appId App id obtained from LiveRamp Console
///
/// \param fallbackConfiguration Fallback configuration that will be used in case configuration cannot be fetched from the server
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId fallbackConfiguration:(LRConfiguration * _Nonnull)fallbackConfiguration OBJC_DESIGNATED_INITIALIZER;
/// Create privacy manager configuration
/// \param appId App id obtained from LiveRamp Console
///
/// \param fallbackConfiguration Fallback configuration that will be used in case configuration cannot be fetched from the server
///
/// \param preferenceLinkConfig Configure unique identifier and additional data that will be used for synchronization with Preference Link
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId fallbackConfiguration:(LRConfiguration * _Nonnull)fallbackConfiguration preferenceLinkConfig:(LRPreferenceLinkConfig * _Nonnull)preferenceLinkConfig;
@end


/// LREvent and Error delegate
SWIFT_PROTOCOL("_TtP19LRPrivacyManagerSDK24LRPrivacyManagerDelegate_")
@protocol LRPrivacyManagerDelegate
/// Callback method for LREvent
/// \param event LREvent
///
- (void)eventFiredWithEvent:(enum LREvent)event;
/// Callback method for Error
/// \param error Error
///
- (void)didReceiveError:(NSError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, LRSDKEvent, open) {
  LRSDKEventConsentChanged = 0,
};


/// Delegate of FRSDKManager.
SWIFT_PROTOCOL("_TtP19LRPrivacyManagerSDK20LRSDKManagerDelegate_")
@protocol LRSDKManagerDelegate
- (void)eventTriggeredWithEvent:(enum LRSDKEvent)event;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12Localization")
@interface Localization : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12NoticeConfig")
@interface NoticeConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK8Overflow")
@interface Overflow : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This object contains information about the loading status and configuration of the CMP
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK10PingReturn")
@interface PingReturn : NSObject
/// true - GDPR Applies
/// false - GDPR Does not apply
/// undefined - unknown whether GDPR Applies
/// see the section: “What does the gdprApplies value mean?”
@property (nonatomic, readonly) BOOL gdprApplies;
/// true - CMP main script is loaded
/// false - still running stub
@property (nonatomic, readonly) BOOL cmpLoaded;
/// see Ping Status Codes in following table
@property (nonatomic, readonly, copy) NSString * _Nonnull cmpStatus;
/// see Ping Status Codes in following table
@property (nonatomic, readonly, copy) NSString * _Nullable displayStatus;
/// version of the CMP API that is supported, e.g. “2.0”
@property (nonatomic, copy) NSString * _Nonnull apiVersion;
/// CMPs own/internal version that is currently running
/// undefined if still the stub
@property (nonatomic) NSInteger cmpVersion;
/// IAB Assigned CMP ID
/// undefined if still the stub
@property (nonatomic) NSInteger cmpId;
/// Version of the GVL currently loaded by the CMP
/// undefined if still the stub
@property (nonatomic) NSInteger gvlVersion;
/// Number of the supported TCF version
/// undefined if still the stub
@property (nonatomic) NSInteger tcfPolicyVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TimeoutOption : NSInteger;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20PreferenceLinkConfig")
@interface PreferenceLinkConfig : NSObject
/// Integration with <em>PreferenceLInk</em> is active if value is <code>true</code>
@property (nonatomic, readonly) BOOL enabled;
/// API key of the schema used for integration between <em>PrivacyManagerSDK</em> and <em>PreferenceLinkSDK</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull apiKey;
/// Unique identifier that is used for synchronizing  user data
@property (nonatomic, readonly, copy) NSString * _Nonnull identifyingField;
/// Not used at the moment
@property (nonatomic, readonly) NSInteger consentTriggerVersion;
/// Minimum time that needs to pass before sync with preference link will be triggered. This is just count of units defined in <a href="x-source-tag://timeoutOption">timeoutOption</a>
/// note:
/// This value is used when checking if sync should be triggered when app enters foreground
@property (nonatomic, readonly) NSInteger timeoutValue;
/// Unit for minimum time that  needs to pass before sync with preference link will be triggered. For value check <a href="x-source-tag://pl.timeoutValue">timeoutValue</a>
@property (nonatomic, readonly) enum TimeoutOption timeoutOption;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TimeoutOption, open) {
  TimeoutOptionSeconds = 0,
  TimeoutOptionMinutes = 1,
  TimeoutOptionHours = 2,
};



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK9Publisher")
@interface Publisher : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16PublisherConsent")
@interface PublisherConsent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20PublisherRestriction")
@interface PublisherRestriction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK7Purpose")
@interface Purpose : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Purpose (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14RedisplayAfter")
@interface RedisplayAfter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14SpecialFeature")
@interface SpecialFeature : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SpecialFeature (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14SpecialPurpose")
@interface SpecialPurpose : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SpecialPurpose (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK5Stack")
@interface Stack : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK9StackInfo")
@interface StackInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TCDataOutOfBand;
@class TCDataPurposeConsent;
@class TCDataVendorConsent;
@class TCDataPublisher;

/// TCData is meant to have data served in just in time manner. Therefore it should not store
/// the  data as data can change at any time. Use empty constructor to get all the data
/// and convenience constructor to get data filtered by the supplied vendor IDs.
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK6TCData")
@interface TCData : NSObject
/// base64url-encoded TC string with segments
@property (nonatomic, copy) NSString * _Nullable tcString;
/// AC string with spec version and consented Ad Tech Provider IDs
@property (nonatomic, copy) NSString * _Nullable addtlConsent;
/// CMP data
@property (nonatomic) NSInteger tcfPolicyVersion;
@property (nonatomic) NSInteger cmpId;
@property (nonatomic) NSInteger cmpVersion;
/// true - GDPR Applies
/// false - GDPR Does not apply
/// undefined - unknown whether GDPR Applies
/// see the section: “What does the gdprApplies value mean?”
@property (nonatomic, readonly) BOOL gdprApplies;
/// see addEventListener command
@property (nonatomic, copy) NSString * _Nullable eventStatus;
/// see Ping Status Codes in following table
@property (nonatomic, readonly, copy) NSString * _Nonnull cmpStatus;
/// true - if using a service-specific or publisher-specific TC String
/// false - if using a global TC String.
@property (nonatomic) BOOL isServiceSpecific;
/// Country code of the country that determines the legislation of
/// reference.  Normally corresponds to the country code of the country
/// in which the publisher’s business entity is established.
/// Two-letter ISO 3166-1 alpha-2 code
@property (nonatomic, copy) NSString * _Nullable publisherCC;
/// Only exists on global-scope TC
@property (nonatomic, strong) TCDataOutOfBand * _Nullable outOfBand;
/// List of purpose consents and legitimate interests
/// based of purpose ids
@property (nonatomic, strong) TCDataPurposeConsent * _Nullable purpose;
/// List of vendor consents and legitimate interests
/// based on vendor ids
@property (nonatomic, strong) TCDataVendorConsent * _Nullable vendor;
/// true - Special Feature Opted Into
/// false - Special Feature NOT Opted Into
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nullable specialFeatureOptins;
/// Publisher consent
@property (nonatomic, strong) TCDataPublisher * _Nullable publisher;
/// Initialize TCData with all available data.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Two segments expressing that a Vendor is using legal bases outside of the TCF to process personal data.
/// The first segment is a list of Vendors disclosed to the user and the second is a list of Vendors that the publisher allows to use out-of-band legal bases
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15TCDataOutOfBand")
@interface TCDataOutOfBand : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15TCDataPublisher")
@interface TCDataPublisher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20TCDataPurposeConsent")
@interface TCDataPurposeConsent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK17TCDataRestriction")
@interface TCDataRestriction : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK18TCDataRestrictions")
@interface TCDataRestrictions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK19TCDataVendorConsent")
@interface TCDataVendorConsent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK5Topic")
@interface Topic : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC19LRPrivacyManagerSDK8UIConfig")
@interface UIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12UIConfigDict")
@interface UIConfigDict : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



















SWIFT_CLASS("_TtC19LRPrivacyManagerSDK6Vendor")
@interface Vendor : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC19LRPrivacyManagerSDK13VendorConsent")
@interface VendorConsent : NSObject
@property (nonatomic, readonly) NSInteger vendorId;
@property (nonatomic, readonly) BOOL hasConsent;
/// Used to inform if vendorId has consent
/// \param vendorId vendorId value
///
/// \param hasConsent boolean value which showing if vendor hasConsent inside consentData
///
- (nonnull instancetype)initWithVendorId:(NSInteger)vendorId hasConsent:(BOOL)hasConsent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK10VendorData")
@interface VendorData : NSObject
@property (nonatomic, readonly) NSInteger vendorId;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposesIds;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable specialFeaturesIds;
/// Used to create object for checking vendor consents
/// \param vendorId vendorId value
///
/// \param purposesIds array of purposeIds (optional)
///
/// \param specialFeaturesIds array of specialFeaturesIds (optional)
/// If an optional array is empty for checking vendor consents all purposeIds or specialFeatureIds will be used to check vendroId consent
///
- (nonnull instancetype)initWithVendorId:(NSInteger)vendorId purposesIds:(NSArray<NSNumber *> * _Nullable)purposesIds specialFeaturesIds:(NSArray<NSNumber *> * _Nullable)specialFeaturesIds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains information about purposes that are locked for specific vendor
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20VendorLockedPurposes")
@interface VendorLockedPurposes : NSObject
/// Id of a vendor that contains locked purposes
@property (nonatomic, readonly) NSInteger vendorId;
/// List of purposes that are locked for vendor
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull purposes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12__tcfapiObjC")
@interface __tcfapiObjC : NSObject
+ (void)invokeWithCommand:(NSString * _Nonnull)command version:(NSInteger)version callback:(void (^ _Nullable)(TCData * _Nonnull, BOOL))callback parameter:(id _Nullable)parameter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef LRPRIVACYMANAGERSDK_SWIFT_H
#define LRPRIVACYMANAGERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import LRPreferenceLinkSDK;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LRPrivacyManagerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11AppUIConfig")
@interface AppUIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ButtonConfig;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16AttButtonsConfig")
@interface AttButtonsConfig : NSObject
@property (nonatomic, readonly, strong) ButtonConfig * _Nullable confirmButton;
@property (nonatomic, readonly, strong) ButtonConfig * _Nullable cancelButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
@class AttLocalization;
@class Topic;
@class AttUIConfig;
@class AttControlsConfig;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK9AttConfig")
@interface AttConfig : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, AttLocalization *> * _Nullable localization;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<Topic *> *> * _Nullable topics;
@property (nonatomic, readonly, strong) AttUIConfig * _Nullable ui;
@property (nonatomic, readonly, strong) AttControlsConfig * _Nullable controls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AttScreenConfig;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK17AttControlsConfig")
@interface AttControlsConfig : NSObject
@property (nonatomic, readonly, strong) AttScreenConfig * _Nullable initialScreen;
@property (nonatomic, readonly, strong) AttScreenConfig * _Nullable reminder;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15AttLocalization")
@interface AttLocalization : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderSettingsButton;
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderCancelButton;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialContinueButton;
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialCancelButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15AttScreenConfig")
@interface AttScreenConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14AttThemeConfig")
@interface AttThemeConfig : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable imageUrl;
@property (nonatomic, readonly, strong) AttButtonsConfig * _Nullable initialScreen;
@property (nonatomic, readonly, strong) AttButtonsConfig * _Nullable reminderScreen;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11AttUIConfig")
@interface AttUIConfig : NSObject
@property (nonatomic, readonly, strong) AttThemeConfig * _Nullable lightTheme;
@property (nonatomic, readonly, strong) AttThemeConfig * _Nullable darkTheme;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIColor;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12ButtonConfig")
@interface ButtonConfig : NSObject
@property (nonatomic, readonly, strong) UIColor * _Nullable textColor;
@property (nonatomic, readonly, strong) UIColor * _Nullable strokeColor;
@property (nonatomic, readonly, strong) UIColor * _Nullable bgColor;
@property (nonatomic, readonly, copy) NSString * _Nullable borderShape;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14ButtonUIConfig")
@interface ButtonUIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;
@class PublisherConsent;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11ConsentData")
@interface ConsentData : NSObject
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable specialFeatures;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposes;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposesLegInt;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable vendors;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable vendorsLegInt;
@property (nonatomic, readonly, strong) PublisherConsent * _Nullable publisherTCConsent;
/// Constructor for building ConsentData object.
/// \param specialFeatures Included special features (mandatory)
///
/// \param purposes Included purposes (mandatory)
///
/// \param purposesLegInt Included legitimate interest for purposes (mandatory)
///
/// \param vendors Included vendors which will be filtered inside function (mandatory)
///
/// \param vendorsLegInt Included vendors legitimate interest (mandatory)
///
/// \param publisherTCConsent Included publisher’s data (optional)
///
- (nonnull instancetype)initWithSpecialFeatures:(NSArray<NSNumber *> * _Nonnull)specialFeatures purposes:(NSArray<NSNumber *> * _Nonnull)purposes purposesLegInt:(NSArray<NSNumber *> * _Nonnull)purposesLegInt vendors:(NSArray<NSNumber *> * _Nonnull)vendors vendorsLegInt:(NSArray<NSNumber *> * _Nonnull)vendorsLegInt publisherTCConsent:(PublisherConsent * _Nullable)publisherTCConsent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK17ConsentDataConfig")
@interface ConsentDataConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16CustomFontConfig")
@interface CustomFontConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11CustomStack")
@interface CustomStack : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK10Disclosure")
@interface Disclosure : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14DisclosureData")
@interface DisclosureData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
@property (nonatomic, readonly, copy) NSString * _Nullable domain;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposes;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK19DisclosureDataArray")
@interface DisclosureDataArray : NSObject
@end

typedef SWIFT_ENUM(NSInteger, DisclosureDataType, open) {
  DisclosureDataTypeCookie = 0,
  DisclosureDataTypeWeb = 1,
  DisclosureDataTypeApp = 2,
/// Used in case vendor provided <code>storageType</code> that is not <code>web</code>, <code>cookie</code> or <code>app</code>
  DisclosureDataTypeInvalid = 3,
};


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK7Feature")
@interface Feature : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Feature (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12GeoTargeting")
@interface GeoTargeting : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14GlobalUIConfig")
@interface GlobalUIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16GlobalVendorList")
@interface GlobalVendorList : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RedisplayAfter;
@class Localization;
@class UIConfigDict;
@class NoticeConfig;
@class PreferenceLinkConfig;
@class NSData;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15LRConfiguration")
@interface LRConfiguration : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable appId;
@property (nonatomic, readonly, strong) RedisplayAfter * _Nullable redisplayAfter;
@property (nonatomic, readonly, strong) ConsentDataConfig * _Nullable consentDataConfig;
@property (nonatomic, readonly, strong) GeoTargeting * _Nullable geoTargeting;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable supportedLocales;
@property (nonatomic, readonly, copy) NSString * _Nullable defaultLocale;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<Topic *> *> * _Nullable topics;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Localization *> * _Nullable localization;
@property (nonatomic, readonly, strong) UIConfigDict * _Nullable uiConfig;
@property (nonatomic, readonly, strong) Disclosure * _Nullable disclosure;
@property (nonatomic, readonly, strong) NoticeConfig * _Nullable noticeConfig;
@property (nonatomic, readonly, strong) PreferenceLinkConfig * _Nullable preferenceLink;
@property (nonatomic, readonly, strong) AttConfig * _Nullable attConfig;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes configuration with the File URL provided. Configuration file can be downloaded from the Live Ramp dashboard.
/// If the configuration is not valid it would not be created and will return nil.
/// Example of providing file URL:
/// \code
/// func fileURL(fileName: String, fileType: String) -> URL? {
///     guard let filePath = Bundle.main.path(forResource: fileName, ofType: fileType) else {
///         return nil
///     }
///     return URL(fileURLWithPath: filePath)
/// }
///
/// \endcode\param configurationURL URL of the file containing Live Ramp Privacy Manager configuration.
///
- (nullable instancetype)initWithConfigurationURL:(NSURL * _Nonnull)configurationURL OBJC_DESIGNATED_INITIALIZER;
/// Initializes configuration with the File URL provided. Configuration file can be downloaded from the Live Ramp dashboard.
/// If the configuration is not valid it would not be created and will return nil.
/// Example of providing data from a file (see example for init with configurationURL above):
/// \code
/// ...
/// let data = try? Data(contentsOf: configURL)
///
/// \endcode\param configurationData Live Ramp Privacy Manager configuration Data.
///
- (nullable instancetype)initWithConfigurationData:(NSData * _Nonnull)configurationData OBJC_DESIGNATED_INITIALIZER;
@end

/// Used to determine from which screen user gave consent
typedef SWIFT_ENUM(NSInteger, LRConsentScreen, open) {
/// case .notice means that user gave consent from notice screen
  LRConsentScreenNotice = 1,
/// case .manager means that user gave consent from manager or some other screen (other that notice)
  LRConsentScreenManager = 2,
};

typedef SWIFT_ENUM(NSInteger, LRConsentType, open) {
/// User rejected everything, no consent given
  LRConsentTypeRejectAll = 0,
/// User accepted everything, full consent given
  LRConsentTypeAcceptAll = 1,
/// User accepted something but not everything, partial consent
  LRConsentTypePartialConsent = 2,
/// User didn’t consent to anything yet (UI not presented to user)
  LRConsentTypeUnknownConsent = 3,
/// Gdpr does not apply to the user
  LRConsentTypeGdprNotApplied = 4,
};

typedef SWIFT_ENUM(NSInteger, LRError, open) {
  LRErrorNotInitialized = 0,
  LRErrorInitialization = 1,
  LRErrorMissingConfiguration = 2,
  LRErrorInvalidConfiguration = 3,
  LRErrorMissingAppId = 4,
  LRErrorWrongUIHierarchy = 5,
  LRErrorUserInterfaceAlreadyPresented = 6,
  LRErrorOfflineGVLInvalid = 7,
  LRErrorOfflineGVLMissing = 8,
  LRErrorMissingPublisherTCConfiguration = 9,
  LRErrorGiveConsentError = 10,
};
static NSString * _Nonnull const LRErrorDomain = @"LRPrivacyManagerSDK.LRError";

typedef SWIFT_ENUM(NSInteger, LREvent, open) {
  LREventTcloaded = 0,
  LREventCmpuishown = 1,
  LREventUseractioncomplete = 2,
  LREventStub = 3,
  LREventLoading = 4,
  LREventLoaded = 5,
  LREventDisabled = 6,
  LREventAuditIdChanged = 7,
  LREventAcceptAllButtonClicked = 8,
  LREventDenyAllButtonClicked = 9,
  LREventSaveAndExitButtonClicked = 10,
  LREventExitButtonClicked = 11,
  LREventShouldPresentConsentWall = 12,
  LREventNotSubjectToGDPR = 13,
  LREventUserInterfaceAlreadyPresented = 14,
/// Fired when DAU log is successfully sent to server. This event can be used to check which consent type is given by calling <code>LRPrivacyManager.shared.getConsentType()</code>
  LREventDauLogSent = 15,
/// Fired when SDK synchronized with <em>PreferenceLink</em>
  LREventSyncedWithPreferenceLink = 16,
/// Fired when user taps “Continue” button on initial ATT Pre-Prompt
  LREventAttInitialContinue = 17,
/// Fired when user taps “Cancel” / “X” button on initial ATT Pre-Prompt
  LREventAttInitialCanceled = 18,
/// Fired when user taps “Open Settings” button on non initial ATT Pre-Prompt
  LREventAttReminderSettings = 19,
/// Fired when user taps “Cancel” / “X” button on non initial ATT Pre-Prompt
  LREventAttReminderCanceled = 20,
/// Fired when user confirms ATT by tapping “Allow” button on system dialog
  LREventAttAuthorized = 21,
/// Fired when user denies ATT by tapping “Ask App Not to Track” button on system dialog
  LREventAttDenied = 22,
};


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK22LRPreferenceLinkConfig")
@interface LRPreferenceLinkConfig : NSObject
/// Unique identifier used for synchronization with <em>Preference Link</em>. Supported types are <code>Int</code> and <code>String</code>
/// Setting this property will cause <em>Privacy Manager</em> to synchronize consent data with <em>Preference Link</em>.
/// To synchronize data with <em>Preference Link</em> before consent wall is resurfaced, set this property before calling <code>LRPrivacyManager.initialize(sdkInitializedHandler:)</code>
/// warning:
/// Setting this property to a new value will clear consent related data from <code>UserDefaults</code>.
@property (nonatomic) id _Nullable identifyingValue;
/// Additional data that is synced alongside <em>Privacy Manager</em> data
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull additionalData;
/// Configure information used for synchronization with PreferenceLink
/// \param identifyingValue Unique identifier used for synchronization with <em>Preference Link</em>. Supported types are: <code>Int</code> and <code>String</code>
///
/// \param additionalData Additional data that is synced alongside <em>Privacy Manager</em> data
///
- (nonnull instancetype)initWithIdentifyingValue:(id _Nullable)identifyingValue additionalData:(NSDictionary<NSString *, id> * _Nonnull)additionalData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LRPrivacyManagerConfig;
@class Publisher;
@protocol LRPrivacyManagerDelegate;
@class VendorData;
@class VendorConsent;
@class NSHTTPCookie;

/// The main interface of the Live Ramp Privacy Manager (SDK).
/// It wraps up the TCF 2.0 API
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16LRPrivacyManager")
@interface LRPrivacyManager : NSObject
+ (void)configureWith:(LRPrivacyManagerConfig * _Nonnull)configuration;
/// Version number of integrated LRPrivacyManager SDK
@property (nonatomic, readonly, copy) NSString * _Nonnull cmpSdkVersion;
/// Current locale used by SDK.
/// Has value of <code>config.defaultLocale</code> if specific locale is not provided by calling <code>LRPrivacyManager.setLanguage(code:)</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull currentLocale;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LRPrivacyManager * _Nonnull shared;)
+ (LRPrivacyManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)initializeWithSdkInitializedHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))sdkInitializedHandler;
/// Get filtered Global Vendor List
/// <ul>
///   <li>
///     This function should be called to get GVL filterd by the configuration with applied publisher restrictions
///   </li>
/// </ul>
/// \param callback which will return 
/// <ul>
///   <li>
///     globalVendorList: The information about global vendor list and custom vendors
///   </li>
///   <li>
///     error: The error that occurred, if any
///   </li>
/// </ul>
///
- (void)getGlobalVendorListWithCallback:(SWIFT_NOESCAPE void (^ _Nonnull)(GlobalVendorList * _Nullable, NSError * _Nullable))callback;
/// Get Configuration
/// <ul>
///   <li>
///     This function should be called to get Configuration
///   </li>
/// </ul>
/// \param callback which will return 
/// <ul>
///   <li>
///     configuration: The information about SDK configuration
///   </li>
///   <li>
///     error: The error that occurred, if any
///   </li>
/// </ul>
///
- (void)getConfigurationWithCallback:(SWIFT_NOESCAPE void (^ _Nonnull)(LRConfiguration * _Nullable, NSError * _Nullable))callback;
/// Show user interface
- (void)presentUserInterfaceWithCallback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Temporary save all SDK related keys from standard UserDefaults
/// This function should be called before you want to clear standard UserDefaults but want to preserve SDK related keys from the standard UserDefaults.
/// In the process keys are saved in-memory. After clearing standard UserDefaults it is mandatory to restore them.
/// Restoring of keys is done by calling restoreUserDefaultsKeys() function.
- (void)persistUserDefaultsKeys;
/// Restore all SDK related keys into the standard UserDefaults
/// This function should be called to restore SDK related keys that are removed from standard UserDefaults and temporarily saved by persistUserDefaultsKeys() function.
- (void)restoreUserDefaultsKeys;
///
/// returns:
/// IAB TCString if it exists, empty string otherwise
- (NSString * _Nonnull)getIABTCString SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// LiveRamp TCString if it exists, empty string otherwise
- (NSString * _Nonnull)getLRTCString SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// AC String if it exists, empty string otherwise
- (NSString * _Nonnull)getACString SWIFT_WARN_UNUSED_RESULT;
/// Get purpose one tratment from the LRConfiguration
///
/// returns:
/// LiveRamp purposeOneTreatment as Bool. True is a default value
- (BOOL)getPurposeOneTreatment SWIFT_WARN_UNUSED_RESULT;
/// Provide Audit ID to the caller
- (NSString * _Nonnull)getAuditId SWIFT_WARN_UNUSED_RESULT;
/// Reset Audit ID overwriting it with the new value.
- (NSString * _Nonnull)resetAuditId SWIFT_WARN_UNUSED_RESULT;
/// Give consent and save IAB Keys into the standard UserDefaults, one key for standard TCString, and the other for LRTCString
/// After creating IAB and LR TC String AC String will be also created
/// <ul>
///   <li>
///     This function should be called to accept consent given from the user’s side
///   </li>
///   <li>
///     After calling the function consent will be saved into the standard UserDefaults under required keys by IAB Documentation.
///   </li>
/// </ul>
/// \param consentData Which consists of:
/// <ul>
///   <li>
///     specialFeatures: Included special features
///   </li>
///   <li>
///     purposes: Included purposes
///   </li>
///   <li>
///     purposesLegInt: Included legitimate interest for purposes
///   </li>
///   <li>
///     vendors: Included vendors which will be filtered inside function
///   </li>
///   <li>
///     vendorsLegInt: Included vendors legitimate interest
///   </li>
///   <li>
///     publisherTC: Included publisher’s data, which is optional
///   </li>
///   <li>
///     shouldCheckForHandleLegIntFlag: flag to check if we need to use handleLegIntOnAcceptAndDenyAll from the configuration to setup legInts
///   </li>
/// </ul>
///
/// \param consentScreen The screen from which user gave consent.
///
/// \param callback The callback to invoke with the given consent status.
///
- (void)giveConsentWithConsentData:(ConsentData * _Nonnull)consentData consentScreen:(enum LRConsentScreen)consentScreen callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Give full consent and save it under the IAB TCF Keys into the standard UserDefaults
/// <ul>
///   <li>
///     After calling this function full consent will be generated and the consent will be saved into the standard UserDefaults as per IAB standard under the IAB TCF keys and LR keys.
///     After creating IAB and LR TC String AC String will be also created
///   </li>
/// </ul>
/// \param consentScreen The screen from which user gave consent.
///
/// \param callback The callback to invoke with the accept consent status.
///
- (void)acceptAllWithConsentScreen:(enum LRConsentScreen)consentScreen callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Revoke consent and save it under the IAB TCF Keys into the standard UserDefaults
/// <ul>
///   <li>
///     After calling this function revoke consent will be generated and the result will be saved into the standard UserDefaults as per IAB standard under the IAB TCF keys and LR keys.
///     After creating IAB and LR TC String AC String will be also created
///   </li>
/// </ul>
/// \param consentScreen The screen from which user gave consent.
///
/// \param callback The callback to invoke with the revoked consent status.
///
- (void)revokeAllWithConsentScreen:(enum LRConsentScreen)consentScreen callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Get PublisherTC from configuration.
/// <ul>
///   <li>
///     This function should be called to get Publisher’s object from the configuration.
///   </li>
/// </ul>
///
/// returns:
/// Publisher’s object (Publisher) consisted out of arrays
- (void)getPublisherTCConfigurationWithCallback:(void (^ _Nullable)(Publisher * _Nullable, NSError * _Nullable))callback;
/// Subscribe for LREvents (set listener)
/// \param delegate LRPrivacyManagerDelegate instance
///
+ (void)setLRPrivacyManagerDelegateWithDelegate:(id <LRPrivacyManagerDelegate> _Nonnull)delegate;
/// Unsubscribe from LREvents (remove listener)
+ (void)removeLRPrivacyManagerDelegate;
/// Get Consent Data for TCString which is stored inside the standard UserDefaults
/// <ul>
///   <li>
///     This function should be called to get the consent data for saved TCString and LRTCString. All data that is saved under the TCString and LRTCString inside standard UserDefaults will be decoded and placed into the ConsentData object.
///   </li>
/// </ul>
///
/// returns:
/// ConsentData object which consists out of
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     specialFeatures: Included special features (mandatory)
///   </li>
///   <li>
///     purposes: Included purposes (mandatory)
///   </li>
///   <li>
///     purposesLegInt: Included legitimate interest for purposes (mandatory)
///   </li>
///   <li>
///     vendors: Included vendors which will be filtered inside function (mandatory)
///   </li>
///   <li>
///     vendorsLegInt: Included vendors legitimate interest (mandatory)
///   </li>
///   <li>
///     publisherTCConsent(optional): data is build out of 2 Bool values, givenConsent and givenLegIntConsent
///   </li>
/// </ul>
- (ConsentData * _Nullable)getConsentData SWIFT_WARN_UNUSED_RESULT;
/// Set Privacy Manager language. If available (selected language is in list of available languages in configuration) SDK content will be translated to it.
/// \param code Language code to use for the SDK Content. This language will override the preferred language from configuration
///
+ (void)setLanguageWithCode:(NSString * _Nonnull)code;
/// Process data to check if vendor has consents inside TCString or LiveRampString
/// This function should be used only when SDK is initialized properly
/// \param vendors list of <code>VendorData</code> objects to check consents
///
///
/// returns:
/// array of vendor objects with pairs (vendorId, hasConsent) for each object, if sdk is not initialized properly nil will be returned for vendorConsents array.
- (NSArray<VendorConsent *> * _Nullable)checkConsentFor:(NSArray<VendorData *> * _Nonnull)vendors SWIFT_WARN_UNUSED_RESULT;
/// Synchronize privacy manager related data from <code>UserDefaults</code> with <em>PreferenceLink</em>
/// This method should be used for headless implementation of <code>LRPrivacyManagerSDK</code>
/// <h1>When to call this method (suggestions)</h1>
/// <ul>
///   <li>
///     when consent is given/changed
///   </li>
///   <li>
///     in <code>LRPrivacyManager.initialize(sdkInitializedHandler:)</code> handler
///   </li>
///   <li>
///     before presenting consent wall
///   </li>
///   <li>
///     after returning to the app from the background — consider <a href="x-source-tag://pl.timeoutValue">timeoutValue</a> and <a href="x-source-tag://pl.timeoutOption">timeoutOption</a> to limit unnecessary sync
///   </li>
/// </ul>
/// \param callback The callback to invoke after synchronization with <em>PreferenceLink</em> is finished
///
- (void)doSyncWithCallback:(void (^ _Nullable)(enum PLSynchronizationStatus, NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))callback;
/// Object containing data used for communication between Privacy Manager and PreferenceLink
@property (nonatomic, readonly, strong) LRPreferenceLinkConfig * _Nonnull preferenceLink;
/// Call this method at any time to retrieve consent status for user
///
/// returns:
/// consent status
- (enum LRConsentType)getConsentType SWIFT_WARN_UNUSED_RESULT;
/// Get consent related cookies that allows sharing consent with the WEB SDK through <code>WKWebView</code>
/// \param domain domain for which cookies will be used
///
///
/// returns:
/// array of cookies required for web SDK
- (NSArray<NSHTTPCookie *> * _Nonnull)getCookiesForDomain:(NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
/// Get generated cookie sharing URL with query items that allows sharing consent with the WEB SDK through external browsers
/// warning:
/// In case cookie sharing URL couldn’t be generated, unmodified URL will be returned
/// \param url URL for which cookie sharing URL will be generated
///
///
/// returns:
/// Generated cookie sharing URL
- (NSURL * _Nonnull)generateCookieSharingURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Removes all data from the <code>UserDefaults</code> that is set by <code>LRPrivacyManagerSDK</code>,
/// Use this method in case it is required to remove all consent data related to the user. For example user signs out from the app and all consent must be removed.
/// note:
/// Keys required by IAB standard are not deleted from <code>UserDefaults</code>.
- (void)clearUserDefaults;
/// Call this method to show ATT prompt
/// warning:
///
/// <ul>
///   <li>
///     This method must be called after SDK is initialized, otherwise it won’t have desired configuration (you can use <code>LRPrivacyManagerDelegate.eventFired(:)</code> and wait for <code>.loaded</code> event)
///   </li>
///   <li>
///     <code>NSUserTrackingUsageDescription</code> must be set  in <code>Info.plist</code>
///   </li>
/// </ul>
/// note:
///
/// To configure look and content of the ATT prompt screens enable ATT for the application in the console
/// There are two types of ATT screens:
/// <ul>
///   <li>
///     initial — shown when user is presented with ATT prompt for the first time or user canceled ATT prompt screen
///   </li>
///   <li>
///     reminder — shown when user already denied ATT. Because ATT is one-time request to authorize or deny access on this screen there will be link to open iOS settings
///   </li>
/// </ul>
/// This method will exit and no events will be triggered in following cases:
/// <ul>
///   <li>
///     ATT is not enabled and configured in the console
///   </li>
///   <li>
///     SDK is not fully initialized and configuration is not available
///   </li>
///   <li>
///     User restricted app tracking globally in settings
///   </li>
///   <li>
///     User already authorized app tracking for the app
///   </li>
/// </ul>
- (void)presentATTPrePrompt SWIFT_AVAILABILITY(ios,introduced=14);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK22LRPrivacyManagerConfig")
@interface LRPrivacyManagerConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create privacy manager configuration
/// \param appId App id obtained from LiveRamp Console
///
/// \param fallbackConfiguration Fallback configuration that will be used in case configuration cannot be fetched from the server
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId fallbackConfiguration:(LRConfiguration * _Nonnull)fallbackConfiguration OBJC_DESIGNATED_INITIALIZER;
/// Create privacy manager configuration
/// \param appId App id obtained from LiveRamp Console
///
/// \param fallbackConfiguration Fallback configuration that will be used in case configuration cannot be fetched from the server
///
/// \param preferenceLinkConfig Configure unique identifier and additional data that will be used for synchronization with Preference Link
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId fallbackConfiguration:(LRConfiguration * _Nonnull)fallbackConfiguration preferenceLinkConfig:(LRPreferenceLinkConfig * _Nonnull)preferenceLinkConfig;
@end


/// LREvent and Error delegate
SWIFT_PROTOCOL("_TtP19LRPrivacyManagerSDK24LRPrivacyManagerDelegate_")
@protocol LRPrivacyManagerDelegate
/// Callback method for LREvent
/// \param event LREvent
///
- (void)eventFiredWithEvent:(enum LREvent)event;
/// Callback method for Error
/// \param error Error
///
- (void)didReceiveError:(NSError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, LRSDKEvent, open) {
  LRSDKEventConsentChanged = 0,
};


/// Delegate of FRSDKManager.
SWIFT_PROTOCOL("_TtP19LRPrivacyManagerSDK20LRSDKManagerDelegate_")
@protocol LRSDKManagerDelegate
- (void)eventTriggeredWithEvent:(enum LRSDKEvent)event;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12Localization")
@interface Localization : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12NoticeConfig")
@interface NoticeConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK8Overflow")
@interface Overflow : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This object contains information about the loading status and configuration of the CMP
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK10PingReturn")
@interface PingReturn : NSObject
/// true - GDPR Applies
/// false - GDPR Does not apply
/// undefined - unknown whether GDPR Applies
/// see the section: “What does the gdprApplies value mean?”
@property (nonatomic, readonly) BOOL gdprApplies;
/// true - CMP main script is loaded
/// false - still running stub
@property (nonatomic, readonly) BOOL cmpLoaded;
/// see Ping Status Codes in following table
@property (nonatomic, readonly, copy) NSString * _Nonnull cmpStatus;
/// see Ping Status Codes in following table
@property (nonatomic, readonly, copy) NSString * _Nullable displayStatus;
/// version of the CMP API that is supported, e.g. “2.0”
@property (nonatomic, copy) NSString * _Nonnull apiVersion;
/// CMPs own/internal version that is currently running
/// undefined if still the stub
@property (nonatomic) NSInteger cmpVersion;
/// IAB Assigned CMP ID
/// undefined if still the stub
@property (nonatomic) NSInteger cmpId;
/// Version of the GVL currently loaded by the CMP
/// undefined if still the stub
@property (nonatomic) NSInteger gvlVersion;
/// Number of the supported TCF version
/// undefined if still the stub
@property (nonatomic) NSInteger tcfPolicyVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TimeoutOption : NSInteger;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20PreferenceLinkConfig")
@interface PreferenceLinkConfig : NSObject
/// Integration with <em>PreferenceLInk</em> is active if value is <code>true</code>
@property (nonatomic, readonly) BOOL enabled;
/// API key of the schema used for integration between <em>PrivacyManagerSDK</em> and <em>PreferenceLinkSDK</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull apiKey;
/// Unique identifier that is used for synchronizing  user data
@property (nonatomic, readonly, copy) NSString * _Nonnull identifyingField;
/// Not used at the moment
@property (nonatomic, readonly) NSInteger consentTriggerVersion;
/// Minimum time that needs to pass before sync with preference link will be triggered. This is just count of units defined in <a href="x-source-tag://timeoutOption">timeoutOption</a>
/// note:
/// This value is used when checking if sync should be triggered when app enters foreground
@property (nonatomic, readonly) NSInteger timeoutValue;
/// Unit for minimum time that  needs to pass before sync with preference link will be triggered. For value check <a href="x-source-tag://pl.timeoutValue">timeoutValue</a>
@property (nonatomic, readonly) enum TimeoutOption timeoutOption;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TimeoutOption, open) {
  TimeoutOptionSeconds = 0,
  TimeoutOptionMinutes = 1,
  TimeoutOptionHours = 2,
};



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK9Publisher")
@interface Publisher : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16PublisherConsent")
@interface PublisherConsent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20PublisherRestriction")
@interface PublisherRestriction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK7Purpose")
@interface Purpose : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Purpose (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14RedisplayAfter")
@interface RedisplayAfter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14SpecialFeature")
@interface SpecialFeature : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SpecialFeature (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14SpecialPurpose")
@interface SpecialPurpose : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SpecialPurpose (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK5Stack")
@interface Stack : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK9StackInfo")
@interface StackInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TCDataOutOfBand;
@class TCDataPurposeConsent;
@class TCDataVendorConsent;
@class TCDataPublisher;

/// TCData is meant to have data served in just in time manner. Therefore it should not store
/// the  data as data can change at any time. Use empty constructor to get all the data
/// and convenience constructor to get data filtered by the supplied vendor IDs.
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK6TCData")
@interface TCData : NSObject
/// base64url-encoded TC string with segments
@property (nonatomic, copy) NSString * _Nullable tcString;
/// AC string with spec version and consented Ad Tech Provider IDs
@property (nonatomic, copy) NSString * _Nullable addtlConsent;
/// CMP data
@property (nonatomic) NSInteger tcfPolicyVersion;
@property (nonatomic) NSInteger cmpId;
@property (nonatomic) NSInteger cmpVersion;
/// true - GDPR Applies
/// false - GDPR Does not apply
/// undefined - unknown whether GDPR Applies
/// see the section: “What does the gdprApplies value mean?”
@property (nonatomic, readonly) BOOL gdprApplies;
/// see addEventListener command
@property (nonatomic, copy) NSString * _Nullable eventStatus;
/// see Ping Status Codes in following table
@property (nonatomic, readonly, copy) NSString * _Nonnull cmpStatus;
/// true - if using a service-specific or publisher-specific TC String
/// false - if using a global TC String.
@property (nonatomic) BOOL isServiceSpecific;
/// Country code of the country that determines the legislation of
/// reference.  Normally corresponds to the country code of the country
/// in which the publisher’s business entity is established.
/// Two-letter ISO 3166-1 alpha-2 code
@property (nonatomic, copy) NSString * _Nullable publisherCC;
/// Only exists on global-scope TC
@property (nonatomic, strong) TCDataOutOfBand * _Nullable outOfBand;
/// List of purpose consents and legitimate interests
/// based of purpose ids
@property (nonatomic, strong) TCDataPurposeConsent * _Nullable purpose;
/// List of vendor consents and legitimate interests
/// based on vendor ids
@property (nonatomic, strong) TCDataVendorConsent * _Nullable vendor;
/// true - Special Feature Opted Into
/// false - Special Feature NOT Opted Into
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nullable specialFeatureOptins;
/// Publisher consent
@property (nonatomic, strong) TCDataPublisher * _Nullable publisher;
/// Initialize TCData with all available data.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Two segments expressing that a Vendor is using legal bases outside of the TCF to process personal data.
/// The first segment is a list of Vendors disclosed to the user and the second is a list of Vendors that the publisher allows to use out-of-band legal bases
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15TCDataOutOfBand")
@interface TCDataOutOfBand : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15TCDataPublisher")
@interface TCDataPublisher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20TCDataPurposeConsent")
@interface TCDataPurposeConsent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK17TCDataRestriction")
@interface TCDataRestriction : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK18TCDataRestrictions")
@interface TCDataRestrictions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK19TCDataVendorConsent")
@interface TCDataVendorConsent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK5Topic")
@interface Topic : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC19LRPrivacyManagerSDK8UIConfig")
@interface UIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12UIConfigDict")
@interface UIConfigDict : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



















SWIFT_CLASS("_TtC19LRPrivacyManagerSDK6Vendor")
@interface Vendor : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC19LRPrivacyManagerSDK13VendorConsent")
@interface VendorConsent : NSObject
@property (nonatomic, readonly) NSInteger vendorId;
@property (nonatomic, readonly) BOOL hasConsent;
/// Used to inform if vendorId has consent
/// \param vendorId vendorId value
///
/// \param hasConsent boolean value which showing if vendor hasConsent inside consentData
///
- (nonnull instancetype)initWithVendorId:(NSInteger)vendorId hasConsent:(BOOL)hasConsent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK10VendorData")
@interface VendorData : NSObject
@property (nonatomic, readonly) NSInteger vendorId;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposesIds;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable specialFeaturesIds;
/// Used to create object for checking vendor consents
/// \param vendorId vendorId value
///
/// \param purposesIds array of purposeIds (optional)
///
/// \param specialFeaturesIds array of specialFeaturesIds (optional)
/// If an optional array is empty for checking vendor consents all purposeIds or specialFeatureIds will be used to check vendroId consent
///
- (nonnull instancetype)initWithVendorId:(NSInteger)vendorId purposesIds:(NSArray<NSNumber *> * _Nullable)purposesIds specialFeaturesIds:(NSArray<NSNumber *> * _Nullable)specialFeaturesIds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains information about purposes that are locked for specific vendor
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20VendorLockedPurposes")
@interface VendorLockedPurposes : NSObject
/// Id of a vendor that contains locked purposes
@property (nonatomic, readonly) NSInteger vendorId;
/// List of purposes that are locked for vendor
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull purposes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12__tcfapiObjC")
@interface __tcfapiObjC : NSObject
+ (void)invokeWithCommand:(NSString * _Nonnull)command version:(NSInteger)version callback:(void (^ _Nullable)(TCData * _Nonnull, BOOL))callback parameter:(id _Nullable)parameter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef LRPRIVACYMANAGERSDK_SWIFT_H
#define LRPRIVACYMANAGERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import LRPreferenceLinkSDK;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LRPrivacyManagerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11AppUIConfig")
@interface AppUIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ButtonConfig;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16AttButtonsConfig")
@interface AttButtonsConfig : NSObject
@property (nonatomic, readonly, strong) ButtonConfig * _Nullable confirmButton;
@property (nonatomic, readonly, strong) ButtonConfig * _Nullable cancelButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
@class AttLocalization;
@class Topic;
@class AttUIConfig;
@class AttControlsConfig;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK9AttConfig")
@interface AttConfig : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, AttLocalization *> * _Nullable localization;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<Topic *> *> * _Nullable topics;
@property (nonatomic, readonly, strong) AttUIConfig * _Nullable ui;
@property (nonatomic, readonly, strong) AttControlsConfig * _Nullable controls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AttScreenConfig;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK17AttControlsConfig")
@interface AttControlsConfig : NSObject
@property (nonatomic, readonly, strong) AttScreenConfig * _Nullable initialScreen;
@property (nonatomic, readonly, strong) AttScreenConfig * _Nullable reminder;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15AttLocalization")
@interface AttLocalization : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderSettingsButton;
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderCancelButton;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialContinueButton;
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable attReminderDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialTitle;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable attInitialCancelButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15AttScreenConfig")
@interface AttScreenConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14AttThemeConfig")
@interface AttThemeConfig : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nullable imageUrl;
@property (nonatomic, readonly, strong) AttButtonsConfig * _Nullable initialScreen;
@property (nonatomic, readonly, strong) AttButtonsConfig * _Nullable reminderScreen;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11AttUIConfig")
@interface AttUIConfig : NSObject
@property (nonatomic, readonly, strong) AttThemeConfig * _Nullable lightTheme;
@property (nonatomic, readonly, strong) AttThemeConfig * _Nullable darkTheme;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIColor;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12ButtonConfig")
@interface ButtonConfig : NSObject
@property (nonatomic, readonly, strong) UIColor * _Nullable textColor;
@property (nonatomic, readonly, strong) UIColor * _Nullable strokeColor;
@property (nonatomic, readonly, strong) UIColor * _Nullable bgColor;
@property (nonatomic, readonly, copy) NSString * _Nullable borderShape;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14ButtonUIConfig")
@interface ButtonUIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSNumber;
@class PublisherConsent;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11ConsentData")
@interface ConsentData : NSObject
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable specialFeatures;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposes;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposesLegInt;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable vendors;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable vendorsLegInt;
@property (nonatomic, readonly, strong) PublisherConsent * _Nullable publisherTCConsent;
/// Constructor for building ConsentData object.
/// \param specialFeatures Included special features (mandatory)
///
/// \param purposes Included purposes (mandatory)
///
/// \param purposesLegInt Included legitimate interest for purposes (mandatory)
///
/// \param vendors Included vendors which will be filtered inside function (mandatory)
///
/// \param vendorsLegInt Included vendors legitimate interest (mandatory)
///
/// \param publisherTCConsent Included publisher’s data (optional)
///
- (nonnull instancetype)initWithSpecialFeatures:(NSArray<NSNumber *> * _Nonnull)specialFeatures purposes:(NSArray<NSNumber *> * _Nonnull)purposes purposesLegInt:(NSArray<NSNumber *> * _Nonnull)purposesLegInt vendors:(NSArray<NSNumber *> * _Nonnull)vendors vendorsLegInt:(NSArray<NSNumber *> * _Nonnull)vendorsLegInt publisherTCConsent:(PublisherConsent * _Nullable)publisherTCConsent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK17ConsentDataConfig")
@interface ConsentDataConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16CustomFontConfig")
@interface CustomFontConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK11CustomStack")
@interface CustomStack : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK10Disclosure")
@interface Disclosure : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14DisclosureData")
@interface DisclosureData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
@property (nonatomic, readonly, copy) NSString * _Nullable domain;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposes;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK19DisclosureDataArray")
@interface DisclosureDataArray : NSObject
@end

typedef SWIFT_ENUM(NSInteger, DisclosureDataType, open) {
  DisclosureDataTypeCookie = 0,
  DisclosureDataTypeWeb = 1,
  DisclosureDataTypeApp = 2,
/// Used in case vendor provided <code>storageType</code> that is not <code>web</code>, <code>cookie</code> or <code>app</code>
  DisclosureDataTypeInvalid = 3,
};


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK7Feature")
@interface Feature : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Feature (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12GeoTargeting")
@interface GeoTargeting : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14GlobalUIConfig")
@interface GlobalUIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16GlobalVendorList")
@interface GlobalVendorList : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RedisplayAfter;
@class Localization;
@class UIConfigDict;
@class NoticeConfig;
@class PreferenceLinkConfig;
@class NSData;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15LRConfiguration")
@interface LRConfiguration : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable appId;
@property (nonatomic, readonly, strong) RedisplayAfter * _Nullable redisplayAfter;
@property (nonatomic, readonly, strong) ConsentDataConfig * _Nullable consentDataConfig;
@property (nonatomic, readonly, strong) GeoTargeting * _Nullable geoTargeting;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable supportedLocales;
@property (nonatomic, readonly, copy) NSString * _Nullable defaultLocale;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<Topic *> *> * _Nullable topics;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Localization *> * _Nullable localization;
@property (nonatomic, readonly, strong) UIConfigDict * _Nullable uiConfig;
@property (nonatomic, readonly, strong) Disclosure * _Nullable disclosure;
@property (nonatomic, readonly, strong) NoticeConfig * _Nullable noticeConfig;
@property (nonatomic, readonly, strong) PreferenceLinkConfig * _Nullable preferenceLink;
@property (nonatomic, readonly, strong) AttConfig * _Nullable attConfig;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes configuration with the File URL provided. Configuration file can be downloaded from the Live Ramp dashboard.
/// If the configuration is not valid it would not be created and will return nil.
/// Example of providing file URL:
/// \code
/// func fileURL(fileName: String, fileType: String) -> URL? {
///     guard let filePath = Bundle.main.path(forResource: fileName, ofType: fileType) else {
///         return nil
///     }
///     return URL(fileURLWithPath: filePath)
/// }
///
/// \endcode\param configurationURL URL of the file containing Live Ramp Privacy Manager configuration.
///
- (nullable instancetype)initWithConfigurationURL:(NSURL * _Nonnull)configurationURL OBJC_DESIGNATED_INITIALIZER;
/// Initializes configuration with the File URL provided. Configuration file can be downloaded from the Live Ramp dashboard.
/// If the configuration is not valid it would not be created and will return nil.
/// Example of providing data from a file (see example for init with configurationURL above):
/// \code
/// ...
/// let data = try? Data(contentsOf: configURL)
///
/// \endcode\param configurationData Live Ramp Privacy Manager configuration Data.
///
- (nullable instancetype)initWithConfigurationData:(NSData * _Nonnull)configurationData OBJC_DESIGNATED_INITIALIZER;
@end

/// Used to determine from which screen user gave consent
typedef SWIFT_ENUM(NSInteger, LRConsentScreen, open) {
/// case .notice means that user gave consent from notice screen
  LRConsentScreenNotice = 1,
/// case .manager means that user gave consent from manager or some other screen (other that notice)
  LRConsentScreenManager = 2,
};

typedef SWIFT_ENUM(NSInteger, LRConsentType, open) {
/// User rejected everything, no consent given
  LRConsentTypeRejectAll = 0,
/// User accepted everything, full consent given
  LRConsentTypeAcceptAll = 1,
/// User accepted something but not everything, partial consent
  LRConsentTypePartialConsent = 2,
/// User didn’t consent to anything yet (UI not presented to user)
  LRConsentTypeUnknownConsent = 3,
/// Gdpr does not apply to the user
  LRConsentTypeGdprNotApplied = 4,
};

typedef SWIFT_ENUM(NSInteger, LRError, open) {
  LRErrorNotInitialized = 0,
  LRErrorInitialization = 1,
  LRErrorMissingConfiguration = 2,
  LRErrorInvalidConfiguration = 3,
  LRErrorMissingAppId = 4,
  LRErrorWrongUIHierarchy = 5,
  LRErrorUserInterfaceAlreadyPresented = 6,
  LRErrorOfflineGVLInvalid = 7,
  LRErrorOfflineGVLMissing = 8,
  LRErrorMissingPublisherTCConfiguration = 9,
  LRErrorGiveConsentError = 10,
};
static NSString * _Nonnull const LRErrorDomain = @"LRPrivacyManagerSDK.LRError";

typedef SWIFT_ENUM(NSInteger, LREvent, open) {
  LREventTcloaded = 0,
  LREventCmpuishown = 1,
  LREventUseractioncomplete = 2,
  LREventStub = 3,
  LREventLoading = 4,
  LREventLoaded = 5,
  LREventDisabled = 6,
  LREventAuditIdChanged = 7,
  LREventAcceptAllButtonClicked = 8,
  LREventDenyAllButtonClicked = 9,
  LREventSaveAndExitButtonClicked = 10,
  LREventExitButtonClicked = 11,
  LREventShouldPresentConsentWall = 12,
  LREventNotSubjectToGDPR = 13,
  LREventUserInterfaceAlreadyPresented = 14,
/// Fired when DAU log is successfully sent to server. This event can be used to check which consent type is given by calling <code>LRPrivacyManager.shared.getConsentType()</code>
  LREventDauLogSent = 15,
/// Fired when SDK synchronized with <em>PreferenceLink</em>
  LREventSyncedWithPreferenceLink = 16,
/// Fired when user taps “Continue” button on initial ATT Pre-Prompt
  LREventAttInitialContinue = 17,
/// Fired when user taps “Cancel” / “X” button on initial ATT Pre-Prompt
  LREventAttInitialCanceled = 18,
/// Fired when user taps “Open Settings” button on non initial ATT Pre-Prompt
  LREventAttReminderSettings = 19,
/// Fired when user taps “Cancel” / “X” button on non initial ATT Pre-Prompt
  LREventAttReminderCanceled = 20,
/// Fired when user confirms ATT by tapping “Allow” button on system dialog
  LREventAttAuthorized = 21,
/// Fired when user denies ATT by tapping “Ask App Not to Track” button on system dialog
  LREventAttDenied = 22,
};


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK22LRPreferenceLinkConfig")
@interface LRPreferenceLinkConfig : NSObject
/// Unique identifier used for synchronization with <em>Preference Link</em>. Supported types are <code>Int</code> and <code>String</code>
/// Setting this property will cause <em>Privacy Manager</em> to synchronize consent data with <em>Preference Link</em>.
/// To synchronize data with <em>Preference Link</em> before consent wall is resurfaced, set this property before calling <code>LRPrivacyManager.initialize(sdkInitializedHandler:)</code>
/// warning:
/// Setting this property to a new value will clear consent related data from <code>UserDefaults</code>.
@property (nonatomic) id _Nullable identifyingValue;
/// Additional data that is synced alongside <em>Privacy Manager</em> data
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull additionalData;
/// Configure information used for synchronization with PreferenceLink
/// \param identifyingValue Unique identifier used for synchronization with <em>Preference Link</em>. Supported types are: <code>Int</code> and <code>String</code>
///
/// \param additionalData Additional data that is synced alongside <em>Privacy Manager</em> data
///
- (nonnull instancetype)initWithIdentifyingValue:(id _Nullable)identifyingValue additionalData:(NSDictionary<NSString *, id> * _Nonnull)additionalData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LRPrivacyManagerConfig;
@class Publisher;
@protocol LRPrivacyManagerDelegate;
@class VendorData;
@class VendorConsent;
@class NSHTTPCookie;

/// The main interface of the Live Ramp Privacy Manager (SDK).
/// It wraps up the TCF 2.0 API
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16LRPrivacyManager")
@interface LRPrivacyManager : NSObject
+ (void)configureWith:(LRPrivacyManagerConfig * _Nonnull)configuration;
/// Version number of integrated LRPrivacyManager SDK
@property (nonatomic, readonly, copy) NSString * _Nonnull cmpSdkVersion;
/// Current locale used by SDK.
/// Has value of <code>config.defaultLocale</code> if specific locale is not provided by calling <code>LRPrivacyManager.setLanguage(code:)</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull currentLocale;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LRPrivacyManager * _Nonnull shared;)
+ (LRPrivacyManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)initializeWithSdkInitializedHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))sdkInitializedHandler;
/// Get filtered Global Vendor List
/// <ul>
///   <li>
///     This function should be called to get GVL filterd by the configuration with applied publisher restrictions
///   </li>
/// </ul>
/// \param callback which will return 
/// <ul>
///   <li>
///     globalVendorList: The information about global vendor list and custom vendors
///   </li>
///   <li>
///     error: The error that occurred, if any
///   </li>
/// </ul>
///
- (void)getGlobalVendorListWithCallback:(SWIFT_NOESCAPE void (^ _Nonnull)(GlobalVendorList * _Nullable, NSError * _Nullable))callback;
/// Get Configuration
/// <ul>
///   <li>
///     This function should be called to get Configuration
///   </li>
/// </ul>
/// \param callback which will return 
/// <ul>
///   <li>
///     configuration: The information about SDK configuration
///   </li>
///   <li>
///     error: The error that occurred, if any
///   </li>
/// </ul>
///
- (void)getConfigurationWithCallback:(SWIFT_NOESCAPE void (^ _Nonnull)(LRConfiguration * _Nullable, NSError * _Nullable))callback;
/// Show user interface
- (void)presentUserInterfaceWithCallback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Temporary save all SDK related keys from standard UserDefaults
/// This function should be called before you want to clear standard UserDefaults but want to preserve SDK related keys from the standard UserDefaults.
/// In the process keys are saved in-memory. After clearing standard UserDefaults it is mandatory to restore them.
/// Restoring of keys is done by calling restoreUserDefaultsKeys() function.
- (void)persistUserDefaultsKeys;
/// Restore all SDK related keys into the standard UserDefaults
/// This function should be called to restore SDK related keys that are removed from standard UserDefaults and temporarily saved by persistUserDefaultsKeys() function.
- (void)restoreUserDefaultsKeys;
///
/// returns:
/// IAB TCString if it exists, empty string otherwise
- (NSString * _Nonnull)getIABTCString SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// LiveRamp TCString if it exists, empty string otherwise
- (NSString * _Nonnull)getLRTCString SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// AC String if it exists, empty string otherwise
- (NSString * _Nonnull)getACString SWIFT_WARN_UNUSED_RESULT;
/// Get purpose one tratment from the LRConfiguration
///
/// returns:
/// LiveRamp purposeOneTreatment as Bool. True is a default value
- (BOOL)getPurposeOneTreatment SWIFT_WARN_UNUSED_RESULT;
/// Provide Audit ID to the caller
- (NSString * _Nonnull)getAuditId SWIFT_WARN_UNUSED_RESULT;
/// Reset Audit ID overwriting it with the new value.
- (NSString * _Nonnull)resetAuditId SWIFT_WARN_UNUSED_RESULT;
/// Give consent and save IAB Keys into the standard UserDefaults, one key for standard TCString, and the other for LRTCString
/// After creating IAB and LR TC String AC String will be also created
/// <ul>
///   <li>
///     This function should be called to accept consent given from the user’s side
///   </li>
///   <li>
///     After calling the function consent will be saved into the standard UserDefaults under required keys by IAB Documentation.
///   </li>
/// </ul>
/// \param consentData Which consists of:
/// <ul>
///   <li>
///     specialFeatures: Included special features
///   </li>
///   <li>
///     purposes: Included purposes
///   </li>
///   <li>
///     purposesLegInt: Included legitimate interest for purposes
///   </li>
///   <li>
///     vendors: Included vendors which will be filtered inside function
///   </li>
///   <li>
///     vendorsLegInt: Included vendors legitimate interest
///   </li>
///   <li>
///     publisherTC: Included publisher’s data, which is optional
///   </li>
///   <li>
///     shouldCheckForHandleLegIntFlag: flag to check if we need to use handleLegIntOnAcceptAndDenyAll from the configuration to setup legInts
///   </li>
/// </ul>
///
/// \param consentScreen The screen from which user gave consent.
///
/// \param callback The callback to invoke with the given consent status.
///
- (void)giveConsentWithConsentData:(ConsentData * _Nonnull)consentData consentScreen:(enum LRConsentScreen)consentScreen callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Give full consent and save it under the IAB TCF Keys into the standard UserDefaults
/// <ul>
///   <li>
///     After calling this function full consent will be generated and the consent will be saved into the standard UserDefaults as per IAB standard under the IAB TCF keys and LR keys.
///     After creating IAB and LR TC String AC String will be also created
///   </li>
/// </ul>
/// \param consentScreen The screen from which user gave consent.
///
/// \param callback The callback to invoke with the accept consent status.
///
- (void)acceptAllWithConsentScreen:(enum LRConsentScreen)consentScreen callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Revoke consent and save it under the IAB TCF Keys into the standard UserDefaults
/// <ul>
///   <li>
///     After calling this function revoke consent will be generated and the result will be saved into the standard UserDefaults as per IAB standard under the IAB TCF keys and LR keys.
///     After creating IAB and LR TC String AC String will be also created
///   </li>
/// </ul>
/// \param consentScreen The screen from which user gave consent.
///
/// \param callback The callback to invoke with the revoked consent status.
///
- (void)revokeAllWithConsentScreen:(enum LRConsentScreen)consentScreen callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Get PublisherTC from configuration.
/// <ul>
///   <li>
///     This function should be called to get Publisher’s object from the configuration.
///   </li>
/// </ul>
///
/// returns:
/// Publisher’s object (Publisher) consisted out of arrays
- (void)getPublisherTCConfigurationWithCallback:(void (^ _Nullable)(Publisher * _Nullable, NSError * _Nullable))callback;
/// Subscribe for LREvents (set listener)
/// \param delegate LRPrivacyManagerDelegate instance
///
+ (void)setLRPrivacyManagerDelegateWithDelegate:(id <LRPrivacyManagerDelegate> _Nonnull)delegate;
/// Unsubscribe from LREvents (remove listener)
+ (void)removeLRPrivacyManagerDelegate;
/// Get Consent Data for TCString which is stored inside the standard UserDefaults
/// <ul>
///   <li>
///     This function should be called to get the consent data for saved TCString and LRTCString. All data that is saved under the TCString and LRTCString inside standard UserDefaults will be decoded and placed into the ConsentData object.
///   </li>
/// </ul>
///
/// returns:
/// ConsentData object which consists out of
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     specialFeatures: Included special features (mandatory)
///   </li>
///   <li>
///     purposes: Included purposes (mandatory)
///   </li>
///   <li>
///     purposesLegInt: Included legitimate interest for purposes (mandatory)
///   </li>
///   <li>
///     vendors: Included vendors which will be filtered inside function (mandatory)
///   </li>
///   <li>
///     vendorsLegInt: Included vendors legitimate interest (mandatory)
///   </li>
///   <li>
///     publisherTCConsent(optional): data is build out of 2 Bool values, givenConsent and givenLegIntConsent
///   </li>
/// </ul>
- (ConsentData * _Nullable)getConsentData SWIFT_WARN_UNUSED_RESULT;
/// Set Privacy Manager language. If available (selected language is in list of available languages in configuration) SDK content will be translated to it.
/// \param code Language code to use for the SDK Content. This language will override the preferred language from configuration
///
+ (void)setLanguageWithCode:(NSString * _Nonnull)code;
/// Process data to check if vendor has consents inside TCString or LiveRampString
/// This function should be used only when SDK is initialized properly
/// \param vendors list of <code>VendorData</code> objects to check consents
///
///
/// returns:
/// array of vendor objects with pairs (vendorId, hasConsent) for each object, if sdk is not initialized properly nil will be returned for vendorConsents array.
- (NSArray<VendorConsent *> * _Nullable)checkConsentFor:(NSArray<VendorData *> * _Nonnull)vendors SWIFT_WARN_UNUSED_RESULT;
/// Synchronize privacy manager related data from <code>UserDefaults</code> with <em>PreferenceLink</em>
/// This method should be used for headless implementation of <code>LRPrivacyManagerSDK</code>
/// <h1>When to call this method (suggestions)</h1>
/// <ul>
///   <li>
///     when consent is given/changed
///   </li>
///   <li>
///     in <code>LRPrivacyManager.initialize(sdkInitializedHandler:)</code> handler
///   </li>
///   <li>
///     before presenting consent wall
///   </li>
///   <li>
///     after returning to the app from the background — consider <a href="x-source-tag://pl.timeoutValue">timeoutValue</a> and <a href="x-source-tag://pl.timeoutOption">timeoutOption</a> to limit unnecessary sync
///   </li>
/// </ul>
/// \param callback The callback to invoke after synchronization with <em>PreferenceLink</em> is finished
///
- (void)doSyncWithCallback:(void (^ _Nullable)(enum PLSynchronizationStatus, NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))callback;
/// Object containing data used for communication between Privacy Manager and PreferenceLink
@property (nonatomic, readonly, strong) LRPreferenceLinkConfig * _Nonnull preferenceLink;
/// Call this method at any time to retrieve consent status for user
///
/// returns:
/// consent status
- (enum LRConsentType)getConsentType SWIFT_WARN_UNUSED_RESULT;
/// Get consent related cookies that allows sharing consent with the WEB SDK through <code>WKWebView</code>
/// \param domain domain for which cookies will be used
///
///
/// returns:
/// array of cookies required for web SDK
- (NSArray<NSHTTPCookie *> * _Nonnull)getCookiesForDomain:(NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
/// Get generated cookie sharing URL with query items that allows sharing consent with the WEB SDK through external browsers
/// warning:
/// In case cookie sharing URL couldn’t be generated, unmodified URL will be returned
/// \param url URL for which cookie sharing URL will be generated
///
///
/// returns:
/// Generated cookie sharing URL
- (NSURL * _Nonnull)generateCookieSharingURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Removes all data from the <code>UserDefaults</code> that is set by <code>LRPrivacyManagerSDK</code>,
/// Use this method in case it is required to remove all consent data related to the user. For example user signs out from the app and all consent must be removed.
/// note:
/// Keys required by IAB standard are not deleted from <code>UserDefaults</code>.
- (void)clearUserDefaults;
/// Call this method to show ATT prompt
/// warning:
///
/// <ul>
///   <li>
///     This method must be called after SDK is initialized, otherwise it won’t have desired configuration (you can use <code>LRPrivacyManagerDelegate.eventFired(:)</code> and wait for <code>.loaded</code> event)
///   </li>
///   <li>
///     <code>NSUserTrackingUsageDescription</code> must be set  in <code>Info.plist</code>
///   </li>
/// </ul>
/// note:
///
/// To configure look and content of the ATT prompt screens enable ATT for the application in the console
/// There are two types of ATT screens:
/// <ul>
///   <li>
///     initial — shown when user is presented with ATT prompt for the first time or user canceled ATT prompt screen
///   </li>
///   <li>
///     reminder — shown when user already denied ATT. Because ATT is one-time request to authorize or deny access on this screen there will be link to open iOS settings
///   </li>
/// </ul>
/// This method will exit and no events will be triggered in following cases:
/// <ul>
///   <li>
///     ATT is not enabled and configured in the console
///   </li>
///   <li>
///     SDK is not fully initialized and configuration is not available
///   </li>
///   <li>
///     User restricted app tracking globally in settings
///   </li>
///   <li>
///     User already authorized app tracking for the app
///   </li>
/// </ul>
- (void)presentATTPrePrompt SWIFT_AVAILABILITY(ios,introduced=14);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK22LRPrivacyManagerConfig")
@interface LRPrivacyManagerConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create privacy manager configuration
/// \param appId App id obtained from LiveRamp Console
///
/// \param fallbackConfiguration Fallback configuration that will be used in case configuration cannot be fetched from the server
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId fallbackConfiguration:(LRConfiguration * _Nonnull)fallbackConfiguration OBJC_DESIGNATED_INITIALIZER;
/// Create privacy manager configuration
/// \param appId App id obtained from LiveRamp Console
///
/// \param fallbackConfiguration Fallback configuration that will be used in case configuration cannot be fetched from the server
///
/// \param preferenceLinkConfig Configure unique identifier and additional data that will be used for synchronization with Preference Link
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId fallbackConfiguration:(LRConfiguration * _Nonnull)fallbackConfiguration preferenceLinkConfig:(LRPreferenceLinkConfig * _Nonnull)preferenceLinkConfig;
@end


/// LREvent and Error delegate
SWIFT_PROTOCOL("_TtP19LRPrivacyManagerSDK24LRPrivacyManagerDelegate_")
@protocol LRPrivacyManagerDelegate
/// Callback method for LREvent
/// \param event LREvent
///
- (void)eventFiredWithEvent:(enum LREvent)event;
/// Callback method for Error
/// \param error Error
///
- (void)didReceiveError:(NSError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, LRSDKEvent, open) {
  LRSDKEventConsentChanged = 0,
};


/// Delegate of FRSDKManager.
SWIFT_PROTOCOL("_TtP19LRPrivacyManagerSDK20LRSDKManagerDelegate_")
@protocol LRSDKManagerDelegate
- (void)eventTriggeredWithEvent:(enum LRSDKEvent)event;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12Localization")
@interface Localization : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12NoticeConfig")
@interface NoticeConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK8Overflow")
@interface Overflow : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This object contains information about the loading status and configuration of the CMP
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK10PingReturn")
@interface PingReturn : NSObject
/// true - GDPR Applies
/// false - GDPR Does not apply
/// undefined - unknown whether GDPR Applies
/// see the section: “What does the gdprApplies value mean?”
@property (nonatomic, readonly) BOOL gdprApplies;
/// true - CMP main script is loaded
/// false - still running stub
@property (nonatomic, readonly) BOOL cmpLoaded;
/// see Ping Status Codes in following table
@property (nonatomic, readonly, copy) NSString * _Nonnull cmpStatus;
/// see Ping Status Codes in following table
@property (nonatomic, readonly, copy) NSString * _Nullable displayStatus;
/// version of the CMP API that is supported, e.g. “2.0”
@property (nonatomic, copy) NSString * _Nonnull apiVersion;
/// CMPs own/internal version that is currently running
/// undefined if still the stub
@property (nonatomic) NSInteger cmpVersion;
/// IAB Assigned CMP ID
/// undefined if still the stub
@property (nonatomic) NSInteger cmpId;
/// Version of the GVL currently loaded by the CMP
/// undefined if still the stub
@property (nonatomic) NSInteger gvlVersion;
/// Number of the supported TCF version
/// undefined if still the stub
@property (nonatomic) NSInteger tcfPolicyVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TimeoutOption : NSInteger;

SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20PreferenceLinkConfig")
@interface PreferenceLinkConfig : NSObject
/// Integration with <em>PreferenceLInk</em> is active if value is <code>true</code>
@property (nonatomic, readonly) BOOL enabled;
/// API key of the schema used for integration between <em>PrivacyManagerSDK</em> and <em>PreferenceLinkSDK</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull apiKey;
/// Unique identifier that is used for synchronizing  user data
@property (nonatomic, readonly, copy) NSString * _Nonnull identifyingField;
/// Not used at the moment
@property (nonatomic, readonly) NSInteger consentTriggerVersion;
/// Minimum time that needs to pass before sync with preference link will be triggered. This is just count of units defined in <a href="x-source-tag://timeoutOption">timeoutOption</a>
/// note:
/// This value is used when checking if sync should be triggered when app enters foreground
@property (nonatomic, readonly) NSInteger timeoutValue;
/// Unit for minimum time that  needs to pass before sync with preference link will be triggered. For value check <a href="x-source-tag://pl.timeoutValue">timeoutValue</a>
@property (nonatomic, readonly) enum TimeoutOption timeoutOption;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, TimeoutOption, open) {
  TimeoutOptionSeconds = 0,
  TimeoutOptionMinutes = 1,
  TimeoutOptionHours = 2,
};



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK9Publisher")
@interface Publisher : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC19LRPrivacyManagerSDK16PublisherConsent")
@interface PublisherConsent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20PublisherRestriction")
@interface PublisherRestriction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK7Purpose")
@interface Purpose : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Purpose (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14RedisplayAfter")
@interface RedisplayAfter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14SpecialFeature")
@interface SpecialFeature : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SpecialFeature (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK14SpecialPurpose")
@interface SpecialPurpose : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SpecialPurpose (SWIFT_EXTENSION(LRPrivacyManagerSDK))
@property (nonatomic, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK5Stack")
@interface Stack : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19LRPrivacyManagerSDK9StackInfo")
@interface StackInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TCDataOutOfBand;
@class TCDataPurposeConsent;
@class TCDataVendorConsent;
@class TCDataPublisher;

/// TCData is meant to have data served in just in time manner. Therefore it should not store
/// the  data as data can change at any time. Use empty constructor to get all the data
/// and convenience constructor to get data filtered by the supplied vendor IDs.
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK6TCData")
@interface TCData : NSObject
/// base64url-encoded TC string with segments
@property (nonatomic, copy) NSString * _Nullable tcString;
/// AC string with spec version and consented Ad Tech Provider IDs
@property (nonatomic, copy) NSString * _Nullable addtlConsent;
/// CMP data
@property (nonatomic) NSInteger tcfPolicyVersion;
@property (nonatomic) NSInteger cmpId;
@property (nonatomic) NSInteger cmpVersion;
/// true - GDPR Applies
/// false - GDPR Does not apply
/// undefined - unknown whether GDPR Applies
/// see the section: “What does the gdprApplies value mean?”
@property (nonatomic, readonly) BOOL gdprApplies;
/// see addEventListener command
@property (nonatomic, copy) NSString * _Nullable eventStatus;
/// see Ping Status Codes in following table
@property (nonatomic, readonly, copy) NSString * _Nonnull cmpStatus;
/// true - if using a service-specific or publisher-specific TC String
/// false - if using a global TC String.
@property (nonatomic) BOOL isServiceSpecific;
/// Country code of the country that determines the legislation of
/// reference.  Normally corresponds to the country code of the country
/// in which the publisher’s business entity is established.
/// Two-letter ISO 3166-1 alpha-2 code
@property (nonatomic, copy) NSString * _Nullable publisherCC;
/// Only exists on global-scope TC
@property (nonatomic, strong) TCDataOutOfBand * _Nullable outOfBand;
/// List of purpose consents and legitimate interests
/// based of purpose ids
@property (nonatomic, strong) TCDataPurposeConsent * _Nullable purpose;
/// List of vendor consents and legitimate interests
/// based on vendor ids
@property (nonatomic, strong) TCDataVendorConsent * _Nullable vendor;
/// true - Special Feature Opted Into
/// false - Special Feature NOT Opted Into
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nullable specialFeatureOptins;
/// Publisher consent
@property (nonatomic, strong) TCDataPublisher * _Nullable publisher;
/// Initialize TCData with all available data.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Two segments expressing that a Vendor is using legal bases outside of the TCF to process personal data.
/// The first segment is a list of Vendors disclosed to the user and the second is a list of Vendors that the publisher allows to use out-of-band legal bases
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15TCDataOutOfBand")
@interface TCDataOutOfBand : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK15TCDataPublisher")
@interface TCDataPublisher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20TCDataPurposeConsent")
@interface TCDataPurposeConsent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK17TCDataRestriction")
@interface TCDataRestriction : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK18TCDataRestrictions")
@interface TCDataRestrictions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK19TCDataVendorConsent")
@interface TCDataVendorConsent : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK5Topic")
@interface Topic : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC19LRPrivacyManagerSDK8UIConfig")
@interface UIConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12UIConfigDict")
@interface UIConfigDict : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



















SWIFT_CLASS("_TtC19LRPrivacyManagerSDK6Vendor")
@interface Vendor : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC19LRPrivacyManagerSDK13VendorConsent")
@interface VendorConsent : NSObject
@property (nonatomic, readonly) NSInteger vendorId;
@property (nonatomic, readonly) BOOL hasConsent;
/// Used to inform if vendorId has consent
/// \param vendorId vendorId value
///
/// \param hasConsent boolean value which showing if vendor hasConsent inside consentData
///
- (nonnull instancetype)initWithVendorId:(NSInteger)vendorId hasConsent:(BOOL)hasConsent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK10VendorData")
@interface VendorData : NSObject
@property (nonatomic, readonly) NSInteger vendorId;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable purposesIds;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable specialFeaturesIds;
/// Used to create object for checking vendor consents
/// \param vendorId vendorId value
///
/// \param purposesIds array of purposeIds (optional)
///
/// \param specialFeaturesIds array of specialFeaturesIds (optional)
/// If an optional array is empty for checking vendor consents all purposeIds or specialFeatureIds will be used to check vendroId consent
///
- (nonnull instancetype)initWithVendorId:(NSInteger)vendorId purposesIds:(NSArray<NSNumber *> * _Nullable)purposesIds specialFeaturesIds:(NSArray<NSNumber *> * _Nullable)specialFeaturesIds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains information about purposes that are locked for specific vendor
SWIFT_CLASS("_TtC19LRPrivacyManagerSDK20VendorLockedPurposes")
@interface VendorLockedPurposes : NSObject
/// Id of a vendor that contains locked purposes
@property (nonatomic, readonly) NSInteger vendorId;
/// List of purposes that are locked for vendor
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull purposes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19LRPrivacyManagerSDK12__tcfapiObjC")
@interface __tcfapiObjC : NSObject
+ (void)invokeWithCommand:(NSString * _Nonnull)command version:(NSInteger)version callback:(void (^ _Nullable)(TCData * _Nonnull, BOOL))callback parameter:(id _Nullable)parameter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
